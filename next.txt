I did a major refactor (just of moving files - no code changes) and would like to:

Library Restructure & Packaging
- Reorganize into standard src/quantfin package layout
- verify all absolute imports (`quantfin.*`) work.
- Parameterize hard-coded data/log directories using `pathlib.Path` or environment variables

Testing & CI
- Write comprehensive pytest suite covering models, techniques, workflows
- Integrate ruff for linting; enforce consistent style
- Add GitHub Actions workflow for install, lint, test, coverage badge

Documentation
- Author NumPy-style docstrings throughout code
- Configure MkDocs + mkdocs-material; host on GitHub Pages
- Keep README minimal; link to full docs site

Performance & Profiling
- Profile critical loops with line_profiler
- Vectorize with NumPy; consider numba or multiprocessing where needed
- Parallelize GreekMixin computations

New Features
- Term-structure interest‐rate models
- Live option pricing (e.g. via Polygon.io API)
- COS and Lewis-Carroll techniques
- American & Bermudan option lattices and MC

Dashboard Enhancements
- Expose model/technique selector, parameter inputs, real-time pricing
- IV surface viewer, implied-rate & put-call-parity widgets
- Robust error handling; persist calibrated params to package directory
- Add additional graphs/stats to showcase library complexity

Housekeeping
- Remove stale files, stray `__pycache__`, unused code paths
- Ensure consistent BSM usage (e.g. BSMIVSolver vs SABR fallback)
- Delete hard-coded “spy data” copies; centralize data management
- Break up data_manager into `option_data` vs `option_manager` modules

Next Steps
- Copy/paste batches of modules for review; validate no import breaks
- Commit changes, push to GitHub, install with `pip install -e .`
- Launch dashboard: `streamlit run scripts/dashboard.py`  


Additions
    ☐ Lattice: American + Bermuda
    ☐ MC Tech: American + Bermuda
    ☐ COS
    ☐ Lewis Carrol
    ☐ Rates models
    ☐ Use pricingResult

Dashboard
    ☐ live pricing via polygon
    ☐ Some more graphs
    ☐ Let user choose params for model
    ☐ Implied rate and put call results 
    ☐ Faster results too

House Cleaning
    ☐ pytests
    ☐ Misc Files
    ☐ Documentation
    ☐ mkdocs file 
    ☐ Download stock jump data

Touch Ups
    ☐ Consistant BSM usage
    ☐ Parrallelize GreekMixing
    ☐ Vectorize code
    ☐ Fix computation issues
    ☐ Remove support for things that dont work
        CGMY MC for Y != 1 is too hard
        FFT for VG and Hyperbolic
        Hyperbolic mc

```
└── 📁qf
    └── 📁.github
        └── 📁workflows
            └── ci.yml
    └── 📁.vscode
        └── settings.json
    └── 📁artifacts
        └── 📁backtest_logs
            └── SPY_backtest_2025-06-17.csv
        └── 📁calibrated_params
            └── SPY_Black-Scholes_2025-06-17.json
            └── SPY_BSM_2025-06-17.json
            └── SPY_Merton_2025-06-17.json
        └── 📁calibration_logs
            └── SPY_evaluation_2025-06-16.csv
    └── 📁calibrated_params
        └── SPY_BSM_2025-06-17.json
    └── 📁data
        └── 📁historical_data
            └── AAPL_10y_returns.parquet
            └── GOOGL_10y_returns.parquet
            └── META_10y_returns.parquet
            └── SPY_10y_returns.parquet
            └── SPY_5y_returns.parquet
            └── TSLA_10y_returns.parquet
        └── 📁market_data_snapshots
            └── 📁17June2025
                └── AAPL_2025-06-17.parquet
                └── AMC_2025-06-17.parquet
                └── AMD_2025-06-17.parquet
                └── AMZN_2025-06-17.parquet
                └── BA_2025-06-17.parquet
                └── BAC_2025-06-17.parquet
                └── CAT_2025-06-17.parquet
                └── CVX_2025-06-17.parquet
                └── GME_2025-06-17.parquet
                └── GOOGL_2025-06-17.parquet
                └── GS_2025-06-17.parquet
                └── HD_2025-06-17.parquet
                └── JNJ_2025-06-17.parquet
                └── JPM_2025-06-17.parquet
                └── META_2025-06-17.parquet
                └── MSFT_2025-06-17.parquet
                └── NKE_2025-06-17.parquet
                └── NVDA_2025-06-17.parquet
                └── PFE_2025-06-17.parquet
                └── QQQ_2025-06-17.parquet
                └── SPY_2025-06-17.parquet
                └── TSLA_2025-06-17.parquet
                └── UNH_2025-06-17.parquet
                └── WMT_2025-06-17.parquet
                └── XOM_2025-06-17.parquet
            └── AAPL_2025-06-16.parquet
            └── GOOGL_2025-06-16.parquet
            └── META_2025-06-16.parquet
            └── SPY_2025-06-16.parquet
            └── SPY_2025-06-17.parquet
            └── TSLA_2025-06-16.parquet
    └── 📁docs
    └── 📁src
        └── 📁quantfin
            └── __init__.py
            └── 📁atoms
                └── __init__.py
                └── option.py
                └── rate.py
                └── stock.py
            └── 📁benchmark
                └── __init__.py
                └── 📁configs
                    └── __init__.py
                    └── base_config.py
                    └── demo_bates.py
                    └── demo_blacks_approx.py
                    └── demo_bsm.py
                    └── demo_cev.py
                    └── demo_cgmy.py
                    └── demo_dupire.py
                    └── demo_heston.py
                    └── demo_hyperbolic.py
                    └── demo_kou.py
                    └── demo_merton_jump.py
                    └── demo_nig.py
                    └── demo_parity_tools.py
                    └── demo_perpetual_put.py
                    └── demo_sabr_jump.py
                    └── demo_sabr.py
                    └── demo_vg.py
                └── consolidated_report.py
                └── report.py
                └── run_all_benchmarks.py
                └── run_consolidated_benchmarks.py
                └── runner.py
            └── 📁calibration
                └── __init__.py
                └── calibrator.py
                └── fit_jump_parameters.py
                └── fit_market_params.py
                └── iv_surface.py
                └── technique_selector.py
            └── 📁data
                └── __init__.py
                └── data_manager.py
                └── fetch_bulk_opt.py
                └── historical_data.py
                └── historical_manager.py
                └── save_historical_data.py
            └── 📁models
                └── __init__.py
                └── 📁base
                    └── __init__.py
                    └── base_model.py
                    └── validators.py
                └── bates.py
                └── blacks_approx.py
                └── bsm.py
                └── cev.py
                └── cgmy.py
                └── dupire_local.py
                └── heston.py
                └── hyperbolic.py
                └── kou.py
                └── merton_jump.py
                └── nig.py
                └── perpetual_put.py
                └── sabr_jump.py
                └── sabr.py
                └── vg.py
            └── 📁parity
                └── __init__.py
                └── implied_rate.py
                └── parity_model.py
            └── 📁plotting
                └── __init__.py
                └── run_visualization.py
                └── smile_plotter.py
            └── 📁scripts
                └── dashboard.py
                └── launch_dashboard.py
                └── run_everything.py
            └── 📁techniques
                └── __init__.py
                └── 📁base
                    └── __init__.py
                    └── base_technique.py
                    └── greek_mixin.py
                    └── iv_mixin.py
                    └── pricing_result.py
                    └── random_utils.py
                └── bsm_iv_solver.py
                └── closed_form.py
                └── crr.py
                └── fft.py
                └── integration.py
                └── leisen_reimer.py
                └── lewis_fft.py
                └── monte_carlo.py
                └── pde.py
                └── topm.py
            └── 📁workflows
                └── __init__.py
                └── backtest_workflow.py
                └── 📁configs
                    └── __init__.py
                    └── bsm_config.py
                    └── heston_config.py
                    └── kou_config.py
                    └── merton_config.py
                    └── nig_config.py
                    └── vg_config.py
                └── daily_workflow.py
                └── run_backtest.py
                └── run_calib.py
    └── 📁tests
    └── .gitignore
    └── LICENSE
    └── next.txt
    └── pyproject.toml
    └── README.md
    └── TODO.txt
```